// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tutor.sql

package db

import (
	"context"
	"database/sql"
)

const createTutor = `-- name: CreateTutor :execresult
INSERT INTO Tutor (fullname, username, email, phone, gender) VALUES(? , ? , ? , ? , ? )
`

type CreateTutorParams struct {
	Fullname string `json:"fullname"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Phone    string `json:"phone"`
	Gender   string `json:"gender"`
}

func (q *Queries) CreateTutor(ctx context.Context, arg CreateTutorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTutor,
		arg.Fullname,
		arg.Username,
		arg.Email,
		arg.Phone,
		arg.Gender,
	)
}

const createTutorPassword = `-- name: CreateTutorPassword :execresult
INSERT INTO Tutor_Password (tutor_id, password) VALUES(?, ?)
`

type CreateTutorPasswordParams struct {
	TutorID  sql.NullInt32 `json:"tutor_id"`
	Password string        `json:"password"`
}

func (q *Queries) CreateTutorPassword(ctx context.Context, arg CreateTutorPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTutorPassword, arg.TutorID, arg.Password)
}

const deleteTutor = `-- name: DeleteTutor :exec
DELETE FROM Tutor WHERE id = ?
`

func (q *Queries) DeleteTutor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTutor, id)
	return err
}

const getTutor = `-- name: GetTutor :one
SELECT id, fullname, username, gender, email, phone, validate, adminid, datecreated, dateupdated FROM Tutor WHERE id = ? AND blocked = 0 LIMIT 1
`

func (q *Queries) GetTutor(ctx context.Context, id int32) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutor, id)
	var i Tutor
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Gender,
		&i.Email,
		&i.Phone,
		&i.Validate,
		&i.Adminid,
		&i.Datecreated,
		&i.Dateupdated,
	)
	return i, err
}

const updateTutor = `-- name: UpdateTutor :execresult
UPDATE Tutor SET fullname = ?, username = ?, email = ?, phone = ?, gender = ? WHERE id = ? AND blocked = 0
`

type UpdateTutorParams struct {
	Fullname string `json:"fullname"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Phone    string `json:"phone"`
	Gender   string `json:"gender"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateTutor(ctx context.Context, arg UpdateTutorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTutor,
		arg.Fullname,
		arg.Username,
		arg.Email,
		arg.Phone,
		arg.Gender,
		arg.ID,
	)
}
