// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: course.sql

package db

import (
	"context"
	"database/sql"
)

const createCourse = `-- name: CreateCourse :execresult
INSERT INTO Course (title, description, price, blocked, datecreated) VALUES(?, ?, ?, false, NOW())
`

type CreateCourseParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCourse, arg.Title, arg.Description, arg.Price)
}

const createCourseTutor = `-- name: CreateCourseTutor :exec
INSERT INTO Course_Tutor (course_id, tutor_id) VALUES(?, ?)
`

type CreateCourseTutorParams struct {
	CourseID int32 `json:"course_id"`
	TutorID  int32 `json:"tutor_id"`
}

func (q *Queries) CreateCourseTutor(ctx context.Context, arg CreateCourseTutorParams) error {
	_, err := q.db.ExecContext(ctx, createCourseTutor, arg.CourseID, arg.TutorID)
	return err
}

const createCourseUser = `-- name: CreateCourseUser :exec
INSERT INTO Course_User (course_id, user_id) VALUES(?, ?)
`

type CreateCourseUserParams struct {
	CourseID int32 `json:"course_id"`
	UserID   int32 `json:"user_id"`
}

func (q *Queries) CreateCourseUser(ctx context.Context, arg CreateCourseUserParams) error {
	_, err := q.db.ExecContext(ctx, createCourseUser, arg.CourseID, arg.UserID)
	return err
}

const createFeedback = `-- name: CreateFeedback :exec
INSERT INTO Feedback (course_id, user_id, content, datecreated) VALUES(?, ?, ?, NOW())
`

type CreateFeedbackParams struct {
	CourseID int32  `json:"course_id"`
	UserID   int32  `json:"user_id"`
	Content  string `json:"content"`
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, createFeedback, arg.CourseID, arg.UserID, arg.Content)
	return err
}

const createLecture = `-- name: CreateLecture :exec
INSERT INTO Lecture (course_id, title, content, datecreated) VALUES(?, ?, ?, NOW())
`

type CreateLectureParams struct {
	CourseID int32  `json:"course_id"`
	Title    string `json:"title"`
	Content  string `json:"content"`
}

func (q *Queries) CreateLecture(ctx context.Context, arg CreateLectureParams) error {
	_, err := q.db.ExecContext(ctx, createLecture, arg.CourseID, arg.Title, arg.Content)
	return err
}

const deleteAllFeedbacks = `-- name: DeleteAllFeedbacks :exec
DELETE FROM Feedback WHERE course_id = ?
`

func (q *Queries) DeleteAllFeedbacks(ctx context.Context, courseID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllFeedbacks, courseID)
	return err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM Course WHERE id = ?
`

func (q *Queries) DeleteCourse(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, id)
	return err
}

const deleteCourseTutor = `-- name: DeleteCourseTutor :exec
DELETE FROM Course_Tutor WHERE course_id = ?
`

func (q *Queries) DeleteCourseTutor(ctx context.Context, courseID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCourseTutor, courseID)
	return err
}

const deleteCourseUser = `-- name: DeleteCourseUser :exec
DELETE FROM Course_User WHERE course_id = ?
`

func (q *Queries) DeleteCourseUser(ctx context.Context, courseID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCourseUser, courseID)
	return err
}

const deleteFeedback = `-- name: DeleteFeedback :exec
DELETE FROM Feedback WHERE course_id = ? AND user_id = ?
`

type DeleteFeedbackParams struct {
	CourseID int32 `json:"course_id"`
	UserID   int32 `json:"user_id"`
}

func (q *Queries) DeleteFeedback(ctx context.Context, arg DeleteFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedback, arg.CourseID, arg.UserID)
	return err
}

const deleteLecture = `-- name: DeleteLecture :exec
DELETE FROM Lecture WHERE course_id = ?
`

func (q *Queries) DeleteLecture(ctx context.Context, courseID int32) error {
	_, err := q.db.ExecContext(ctx, deleteLecture, courseID)
	return err
}

const deleteUserFromCourse = `-- name: DeleteUserFromCourse :exec
DELETE FROM Course_User WHERE course_id = ? AND user_id = ?
`

type DeleteUserFromCourseParams struct {
	CourseID int32 `json:"course_id"`
	UserID   int32 `json:"user_id"`
}

func (q *Queries) DeleteUserFromCourse(ctx context.Context, arg DeleteUserFromCourseParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserFromCourse, arg.CourseID, arg.UserID)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT id, title, description, price, datecreated, dateupdated FROM Course WHERE id = ? AND blocked = 0 LIMIT 1 FOR UPDATE
`

func (q *Queries) GetCourse(ctx context.Context, id int32) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Datecreated,
		&i.Dateupdated,
	)
	return i, err
}

const getCourseTutor = `-- name: GetCourseTutor :one
SELECT course_id FROM Course_Tutor WHERE tutor_id = ? FOR UPDATE
`

func (q *Queries) GetCourseTutor(ctx context.Context, tutorID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCourseTutor, tutorID)
	var course_id int32
	err := row.Scan(&course_id)
	return course_id, err
}

const getCourseUser = `-- name: GetCourseUser :one
SELECT course_id FROM Course_User WHERE user_id = ? FOR UPDATE
`

func (q *Queries) GetCourseUser(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCourseUser, userID)
	var course_id int32
	err := row.Scan(&course_id)
	return course_id, err
}

const getFeedback = `-- name: GetFeedback :one
SELECT id, course_id, user_id, content, datecreated, dateupdated FROM Feedback WHERE course_id = ? AND user_id = ? FOR UPDATE
`

type GetFeedbackParams struct {
	CourseID int32 `json:"course_id"`
	UserID   int32 `json:"user_id"`
}

func (q *Queries) GetFeedback(ctx context.Context, arg GetFeedbackParams) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, getFeedback, arg.CourseID, arg.UserID)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.UserID,
		&i.Content,
		&i.Datecreated,
		&i.Dateupdated,
	)
	return i, err
}

const getLecture = `-- name: GetLecture :one
SELECT id, course_id, title, content, datecreated, dateupdated FROM Lecture WHERE course_id = ? FOR UPDATE
`

func (q *Queries) GetLecture(ctx context.Context, courseID int32) (Lecture, error) {
	row := q.db.QueryRowContext(ctx, getLecture, courseID)
	var i Lecture
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Title,
		&i.Content,
		&i.Datecreated,
		&i.Dateupdated,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT id, title, description, price, datecreated, dateupdated FROM Course WHERE blocked = false ORDER BY id LIMIT 1 FOR UPDATE
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Datecreated,
			&i.Dateupdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE Course SET title = ?, description = ?, price = ? WHERE id = ?
`

type UpdateCourseParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Price       int32  `json:"price"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.ExecContext(ctx, updateCourse,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.ID,
	)
	return err
}

const updateCourseTutor = `-- name: UpdateCourseTutor :exec
UPDATE Course_Tutor SET tutor_id = ? WHERE course_id = ?
`

type UpdateCourseTutorParams struct {
	TutorID  int32 `json:"tutor_id"`
	CourseID int32 `json:"course_id"`
}

func (q *Queries) UpdateCourseTutor(ctx context.Context, arg UpdateCourseTutorParams) error {
	_, err := q.db.ExecContext(ctx, updateCourseTutor, arg.TutorID, arg.CourseID)
	return err
}

const updateFeedback = `-- name: UpdateFeedback :exec
UPDATE Feedback SET content = ? WHERE course_id = ? AND user_id = ?
`

type UpdateFeedbackParams struct {
	Content  string `json:"content"`
	CourseID int32  `json:"course_id"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) UpdateFeedback(ctx context.Context, arg UpdateFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedback, arg.Content, arg.CourseID, arg.UserID)
	return err
}
